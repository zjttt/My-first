#%%Tensorflow实现简单的卷积网络

from tensorflow.examples.tutorials.mnist import input_data
import tensorflow as tf
mnist = input_data.read_data_sets("MNIST_data/",one_hot=True)
sess=tf.InteractiveSession()
#初始化权重与偏置
def weight_variable(shape):
    initial=tf.truncated_normal(shape, stddev=0.1)  #截断正太分布随机数
    return tf.Variable(initial)
    
def bias_variable(shape):
    initial=tf.constant(0.1,shape=shape)
    return tf.Variable(initial)
#定义卷基层和池化层   
def conv2d(x,W):
    #stride[1,x_movement,y_movement,1]
    #Must have stride[0]=stride[3]=1
    return tf.nn.conv2d(x,W,strides=[1,1,1,1], padding='SAME')
def max_pool_2x2(x):
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
#define placeholder for inputs to network    
x=tf.placeholder(tf.float32,[None,784])
y_=tf.placeholder(tf.float32,[None,10])
x_image=tf.reshape(x,[-1,28,28,1])
#print(x_image.shape)  #[n_samples,28,28,1]

#定义第一个卷积层(conv1 layer)
w_conv1=weight_variable([5,5,1,32])   #patch 5x5, in size 1, out size 32
b_conv1=bias_variable([32])
h_conv1=tf.nn.relu(conv2d(x_image,w_conv1)+b_conv1)  #output size 28x28x32
h_pool1=max_pool_2x2(h_conv1)                        #output szie 14x14x32

#定义第二个卷积层(conv2 layer)
w_conv2=weight_variable([5,5,32,64])  #patch 5x5, in size 32, out size 64
b_conv2=bias_variable([64])                            
h_conv2=tf.nn.relu(conv2d(h_pool1,w_conv2)+b_conv2)  #output size 14x14x64 
h_pool2=max_pool_2x2(h_conv2)                        #output szie 7x7x64

 #func1 layer#
w_fc1=weight_variable([7*7*64,1024])
b_fc1=bias_variable([1024])
#[n_samples,7,7,64]->>[n_samples,7*7*64]
h_pool2_flat=tf.reshape(h_pool2,[-1,7*7*64])  #-1代表样本数量不固定
h_fc1=tf.nn.relu(tf.matmul(h_pool2_flat,w_fc1)+b_fc1)

keep_prob=tf.placeholder(tf.float32)
h_fc1_drop=tf.nn.dropout(h_fc1,keep_prob)  #进行dropout处理，防止过拟合

#func2 layer#
#将dropout层的输出连接一个softmax层，得到最后的概率输出
w_fc2=weight_variable([1024,10])
b_fc2=bias_variable([10])
y_prediction=tf.nn.softmax(tf.matmul(h_fc1_drop,w_fc2)+b_fc2)

#定义损失函数
cross_entropy=tf.reduce_mean(-tf.reduce_sum(y_*tf.log(y_prediction),reduction_indices=[1]))
train_step=tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

correct_prediction=tf.equal(tf.argmax(y_prediction,1),tf.argmax(y_,1))
accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))

#下面开始训练过程
tf.global_variables_initializer().run()
for i in range(20000):
    batch=mnist.train.next_batch(50)
    if i%100==0:
        train_accuracy=accuracy.eval(feed_dict={x:batch[0],y_:batch[1],keep_prob:1.0})
        print("step %d, training accuracy %g"%(i,train_accuracy))
    train_step.run(feed_dict={x:batch[0], y_:batch[1], keep_prob:0.5})
#全部训练完成后，在最终的测试集上进行全面的测试，得到整体的分类准确率
print("test accuracy %g"%accuracy.eval(feed_dict={x: mnist.test.images, y_:mnist.test.labels, keep_prob:1.0}))


##result:  test accuracy 0.9918
